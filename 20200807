import java.util.ArrayList;

import java.util.Comparator;

import java.util.List;

 

import DrivingInterface.*;

 

public class MyCar {

 

	boolean is_accident = false;

	int accident_count = 0;

	int recovery_count = 0;

	

    boolean is_debug = true;

 

    public void control_driving(boolean a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8,

                                float[] a9, float[] a10, float[] a11, float[] a12) {

 

        // ===========================================================

        // Don't remove this area. ===================================

        // ===========================================================

        DrivingInterface di = new DrivingInterface();

        DrivingInterface.CarStateValues sensing_info = di.get_car_state(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);

        // ===========================================================

 

        if(is_debug) {

            System.out.println("=========================================================");

            System.out.println("[MyCar] to middle: " + sensing_info.to_middle);

 

            System.out.println("[MyCar] collided: " + sensing_info.collided);

            System.out.println("[MyCar] car speed: " + sensing_info.speed + "km/h"); 

 

            System.out.println("[MyCar] is moving forward: " + sensing_info.moving_forward); 

            System.out.println("[MyCar] moving angle: " + sensing_info.moving_angle); 

            System.out.println("[MyCar] lap_progress: " + sensing_info.lap_progress);

 

            StringBuilder forward_angles = new StringBuilder("[MyCar] track_forward_angles: ");

            for (Float track_forward_angle : sensing_info.track_forward_angles) {

                forward_angles.append(track_forward_angle).append(", ");

            }

            System.out.println(forward_angles);

 

            StringBuilder to_way_points = new StringBuilder("[MyCar] distance_to_way_points: ");

            for (Float distance_to_way_point : sensing_info.distance_to_way_points) {

                to_way_points.append(distance_to_way_point).append(", ");

            }

            System.out.println(to_way_points);

 

            StringBuilder forward_obstacles = new StringBuilder("[MyCar] track_forward_obstacles: ");

            for (DrivingInterface.ObstaclesInfo track_forward_obstacle : sensing_info.track_forward_obstacles) {

                forward_obstacles.append("{dist:").append(track_forward_obstacle.dist) 

                        .append(", to_middle:").append(track_forward_obstacle.to_middle).append("}, "); 

            }

            System.out.println(forward_obstacles);

 

            StringBuilder opponent_cars = new StringBuilder("[MyCar] opponent_cars_info: ");

            for (DrivingInterface.CarsInfo carsInfo : sensing_info.opponent_cars_info) { 

                opponent_cars.append("{dist:").append(carsInfo.dist) 

                        .append(", to_middle:").append(carsInfo.to_middle)

                        .append(", speed:").append(carsInfo.speed).append("km/h}, ");

            }

            System.out.println(opponent_cars);

            

            System.out.println("[MyCar] half_road_limit: " + sensing_info.half_road_limit); 

 

            System.out.println("=========================================================");

        }

 

        // ===========================================================

        // Area for writing code about driving rule ==================

        // ===========================================================

        // Editing area starts from here

        //

        

        float set_throttle = 0.95f;

        if(sensing_info.lap_progress < 2.5f) {

        	car_controls.throttle = 4f;

        	return;

        }

        float set_brake = 0.0f;

        

        /*for (Float track_forward_angle : sensing_info.track_forward_angles) {

            if(Math.abs(track_forward_angle) > 10)

            	set_throttle = 0.83f;

        }*/

        

        if(Math.abs(sensing_info.track_forward_angles.get(1)) > 120) {

        	set_brake = 0.0082f * (sensing_info.speed - 20);

        	set_brake = set_brake>0? set_brake : 0;

        } else if(Math.abs(sensing_info.track_forward_angles.get(1)) > 80) {

        	set_brake = 0.005f * (sensing_info.speed - 20);

        	set_brake = set_brake>0? set_brake : 0;

        } else if(Math.abs(sensing_info.track_forward_angles.get(1)) > 40) {

        	//set_throttle = 0.8f;

        	set_brake = 0.003f * (sensing_info.speed - 20);

        	set_brake = set_brake>0? set_brake : 0;

        }

        

        

        if(sensing_info.speed > 150)

        	set_throttle = 0.8f;

        

        int angle_num = (int) (sensing_info.speed / 70);

        float ref_angle = sensing_info.track_forward_angles.get(angle_num);

        float middle_add = ((sensing_info.to_middle) / 70) * -1;

        

        float set_steering = (ref_angle - sensing_info.moving_angle) / (30+ sensing_info.speed);

        //set_steering += middle_add;

        set_steering = (float) (set_steering * (1 - 0.5*Math.atan(middle_add)) + 0.5*middle_add);

        if(sensing_info.track_forward_angles.get(1) > 80)

        	set_steering *= 1.3;

        

        



        if(sensing_info.track_forward_obstacles.size() > 0) {

        	set_throttle = 0.83f;

        	DrivingInterface.ObstaclesInfo fwd_obstacle = sensing_info.track_forward_obstacles.get(0);

        	

        	List<DrivingInterface.ObstaclesInfo> obstacleList = new ArrayList<>();

        	obstacleList.add(fwd_obstacle);

        	

        	DrivingInterface.ObstaclesInfo space = new DrivingInterface.ObstaclesInfo();

        	


        	for(int i=1; i<sensing_info.track_forward_obstacles.size(); ++i) {

        		if(sensing_info.track_forward_obstacles.get(i).dist - sensing_info.track_forward_obstacles.get(0).dist < 5 &&

        				sensing_info.track_forward_obstacles.get(i).to_middle - sensing_info.track_forward_obstacles.get(0).to_middle < 5) {

        			obstacleList.add(sensing_info.track_forward_obstacles.get(i));

        		}

        	}

        	

    

        	if(fwd_obstacle.dist<80 && fwd_obstacle.dist>0 && Math.abs(fwd_obstacle.to_middle)<8.0) {

        		float avoid_width = 4f;

        		

        		if(obstacleList.size() == 1) {

	        		float diff = fwd_obstacle.to_middle - sensing_info.to_middle;

	        		


	        		if(Math.abs(diff) < avoid_width) {


	        			ref_angle = (float) (Math.abs(Math.atan((diff-avoid_width) / fwd_obstacle.dist) * 57.29579));

	        			middle_add = 0;

	        			if(diff > 0) ref_angle *= -1;
	        		}

	        	}

        		else {

                	obstacleList.sort(new Comparator<DrivingInterface.ObstaclesInfo>() {

        				public int compare(DrivingInterface.ObstaclesInfo arg0, DrivingInterface.ObstaclesInfo arg1) {

        					return (int) (arg0.to_middle - arg1.to_middle);

        				}

                	});

                	DrivingInterface.ObstaclesInfo temp1 = new DrivingInterface.ObstaclesInfo();

                	temp1.dist = obstacleList.get(0).dist;

                	temp1.to_middle = -8;

                	DrivingInterface.ObstaclesInfo temp2 = new DrivingInterface.ObstaclesInfo();

                	temp2.dist = obstacleList.get(obstacleList.size()-1).dist;

                	temp2.to_middle = 8;

                	obstacleList.add(0, temp1);

                	obstacleList.add(temp2);

                	

                	space.dist = 100;

                	space.to_middle = 0;

                	for(int i=0; i<obstacleList.size()-1; ++i) {

                		if(obstacleList.get(i+1).to_middle - obstacleList.get(i).to_middle >= 5) {

                			DrivingInterface.ObstaclesInfo tempSpace = new DrivingInterface.ObstaclesInfo();

                			tempSpace.dist = (obstacleList.get(i).dist + obstacleList.get(i+1).dist) / 2;

                			tempSpace.to_middle = (obstacleList.get(i).to_middle + obstacleList.get(i+1).to_middle) / 2;

                			if(space.dist==100 || Math.abs(tempSpace.to_middle-sensing_info.to_middle) < Math.abs(space.to_middle-sensing_info.to_middle)) {

                				space.dist = tempSpace.dist;

                				space.to_middle = tempSpace.to_middle;

                			}

                		}

                	}

                	StringBuilder sb = new StringBuilder();

                	for (DrivingInterface.ObstaclesInfo track_forward_obstacle : obstacleList) {

                        sb.append("{dist:").append(track_forward_obstacle.dist)

                                .append(", to_middle:").append(track_forward_obstacle.to_middle).append("}, ");

                    }

                	System.out.println("obstacleList: " + sb);

                	System.out.println("space : {dist:" + space.dist+ ", to_middle:" + space.to_middle + "}");

                	


        			ref_angle = (float) (Math.abs(Math.atan((space.to_middle-sensing_info.to_middle) / space.dist) * 57.29579));

        			middle_add = 0;

        			if(space.to_middle < sensing_info.to_middle) ref_angle *= -1;

        		}

        		

        		set_steering = (ref_angle - sensing_info.moving_angle) / (180 - sensing_info.speed);

        	}

        }

        


        if(sensing_info.opponent_cars_info.size() > 0) {

        	DrivingInterface.CarsInfo opp_car = sensing_info.opponent_cars_info.get(0);

        	


        	if(opp_car.dist<20 && opp_car.dist>-5) {

        		float offset = (8 - Math.abs(opp_car.to_middle)) / 2;

        		if(opp_car.to_middle > sensing_info.to_middle) {

        			middle_add = ((sensing_info.to_middle + offset) / 70) * -1;

        		} else {

        			middle_add = ((sensing_info.to_middle - offset) / 70) * -1;

        		}

        		

        		set_steering += middle_add;

        	}

        }

        


        boolean full_throttle = true;

        boolean emergency_brake = false;

        

        int road_range = (int) (sensing_info.speed / 30);

        for(int i=0; i<road_range; i++) {

        	float fwd_angle = Math.abs(sensing_info.track_forward_angles.get(i));

        	if(fwd_angle > 50) {

        		full_throttle = false;

        	}

        	if(fwd_angle > 90) {

        		emergency_brake = true;

        		break;

        	}

        }

        

        if(!full_throttle) {

        	if(sensing_info.speed > 130) {

        		set_throttle = 0.5f;

        	}

        	if(sensing_info.speed > 120) {

        		set_brake = 1;

        	}

        }

        

        if(emergency_brake){

        	if(set_steering > 0) {

        		set_steering += 0.3;

        	}

        	else {

        		set_steering -= 0.3;

        	}

        }

        


        if(sensing_info.lap_progress>0.3 && !is_accident && (sensing_info.speed<1.0 && sensing_info.speed>-1.0)) {

        	accident_count += 1;

        }

        

        if(accident_count > 10) {

        	is_accident = true;

        }

        


        if(is_accident){

        	set_steering = 0.02f;

        	set_brake = 0;

        	set_throttle = -1f;

        	recovery_count += 1;

        }

        

        if(recovery_count > 10) {

        	is_accident = false;

        	recovery_count = 0;

        	accident_count = 0;

        	set_steering = 0;

        	set_brake = 0;

        	set_throttle = 0;

        }

 

        car_controls.steering = set_steering;

        car_controls.throttle = set_throttle;

        car_controls.brake = set_brake;

 

        if(is_debug) {

            System.out.println("[MyCar] steering:"+car_controls.steering+

                                     ", throttle:"+car_controls.throttle+", brake:"+car_controls.brake);

        }

 

        //

        // Editing area ends

        // =======================================================

    }

 

    // ===========================================================

    // Don't remove below area. ==================================

    // ===========================================================

    public native void StartDriving();

 

    static MyCar car_controls;

 

    float throttle;

    float steering;

    float brake;

 

    static {

        System.loadLibrary("DrivingInterface/DrivingInterface");

    }

 

    public static void main(String[] args) {

        car_controls = new MyCar();

        car_controls.StartDriving();

    }

    // ===========================================================

}
